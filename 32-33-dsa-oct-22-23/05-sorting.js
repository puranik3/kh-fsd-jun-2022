const numbers = [ 1200, 1000, 500, 350, 2300, 1350, 250 ];

// selection sort
// Select the lowest number and put it in the first position

// Iteration #1
// Objective: To have the lowest number at index 0

// Compare 1200 with 1000 -> since it is "out-of-order", we swap the two
1.1 Compare idx 0, 1: [ 1200, 1000, 500, 350, 2300, 1350, 250 ] -> [ 1000, 1200, 500, 350, 2300, 1350, 250 ]
1.2 Compare idx 0, 2: [ 1000, 1200, 500, 350, 2300, 1350, 250 ] -> [ 500, 1200, 1000, 350, 2300, 1350, 250 ]
1.3 Compare idx 0, 3: [ 500, 1200, 1000, 350, 2300, 1350, 250 ] -> [ 350, 1200, 1000, 500, 2300, 1350, 250 ]
1.4 Compare idx 0, 4: [ 350, 1200, 1000, 500, 2300, 1350, 250 ] -> [ 350, 1200, 1000, 500, 2300, 1350, 250 ]
1.5 Compare idx 0, 5: [ 350, 1200, 1000, 500, 2300, 1350, 250 ] -> [ 350, 1200, 1000, 500, 2300, 1350, 250 ]
1.6 Compare idx 0, 6: [ 350, 1200, 1000, 500, 2300, 1350, 250 ] -> [ 250, 1200, 1000, 500, 2300, 1350, 350 ]

Final state -> [ 250, 1200, 1000, 500, 2300, 1350, 350 ]

// Iteration #2
// Objective: To have the 2nd lowest number at index 1

2.1 Compare idx 1, 2: [ x, 1200, 1000, 500, 2300, 1350, 350 ] -> [ x, 1000, 1200, 500, 2300, 1350, 350 ]
2.2 Compare idx 1, 3: [ x, 1000, 1200, 500, 2300, 1350, 350 ] -> [ x, 500, 1200, 1000, 2300, 1350, 350 ]
2.3 Compare idx 1, 4: [ x, 500, 1200, 1000, 2300, 1350, 350 ] -> [ x, 500, 1200, 1000, 2300, 1350, 350 ]
2.4 Compare idx 1, 5: [ x, 500, 1200, 1000, 2300, 1350, 350 ] -> [ x, 500, 1200, 1000, 2300, 1350, 350 ]
2.5 Compare idx 1, 6: [ x, 500, 1200, 1000, 2300, 1350, 350 ] -> [ x, 350, 1200, 1000, 2300, 1350, 500 ]

Final state -> [ x, 350, 1200, 1000, 2300, 1350, 500 ]

// Iteration #3
// Objective: To have the 3rd lowest number at index 2
3.1 Compare idx 2, 3: [ x, x, 1200, 1000, 2300, 1350, 500 ] -> ...